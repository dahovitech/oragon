{% extends 'admin/base.html.twig' %}

{% block title %}Gestionnaire de médias - Administration - Oragon{% endblock %}

{% block body %}
<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2">
        <i class="bi bi-images me-2 text-primary"></i>Gestionnaire de médias
    </h1>
    <div class="btn-toolbar mb-2 mb-md-0">
        <button type="button" class="btn btn-primary" id="uploadMediaBtn">
            <i class="bi bi-cloud-upload me-2"></i>Uploader des médias
        </button>
    </div>
</div>

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <div class="row align-items-center">
                    <div class="col-md-6">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-collection me-2"></i>Bibliothèque de médias
                        </h5>
                    </div>
                    <div class="col-md-6">
                        <div class="row g-2">
                            <div class="col-md-8">
                                <input type="text" class="form-control" id="mediaSearch" placeholder="Rechercher un média...">
                            </div>
                            <div class="col-md-4">
                                <select class="form-select" id="mediaTypeFilter">
                                    <option value="">Tous les types</option>
                                    <option value="image">Images</option>
                                    <option value="video">Vidéos</option>
                                    <option value="audio">Audio</option>
                                    <option value="document">Documents</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div id="mediaGrid" class="row g-3">
                    <!-- Les médias seront chargés ici via JavaScript -->
                </div>
                
                <div id="mediaPagination" class="d-flex justify-content-center mt-4">
                    <!-- Pagination sera générée ici -->
                </div>
                
                <div id="mediaEmpty" class="text-center py-5" style="display: none;">
                    <i class="bi bi-inbox text-muted" style="font-size: 3rem;"></i>
                    <h5 class="text-muted mt-3">Aucun média trouvé</h5>
                    <p class="text-muted">Commencez par uploader vos premiers médias.</p>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal d'upload -->
<div class="modal fade" id="uploadModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-cloud-upload me-2"></i>Uploader des médias
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="upload-zone" id="uploadZone">
                    <div class="text-center py-5">
                        <i class="bi bi-cloud-upload text-primary" style="font-size: 3rem;"></i>
                        <h6 class="mt-3">Glissez-déposez vos fichiers ici</h6>
                        <p class="text-muted mb-3">ou</p>
                        <button type="button" class="btn btn-outline-primary" id="selectFilesBtn">
                            Sélectionner des fichiers
                        </button>
                        <input type="file" id="fileInput" multiple accept="image/*,video/*,audio/*,.pdf" style="display: none;">
                    </div>
                </div>
                
                <div id="uploadProgress" style="display: none;">
                    <h6>Upload en cours...</h6>
                    <div class="progress">
                        <div class="progress-bar" role="progressbar" style="width: 0%"></div>
                    </div>
                </div>
                
                <div id="uploadResults" class="mt-3"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal de détails média -->
<div class="modal fade" id="mediaDetailModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Détails du média</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <div id="mediaPreview" class="text-center mb-3">
                            <!-- Preview sera généré ici -->
                        </div>
                    </div>
                    <div class="col-md-6">
                        <form id="mediaEditForm">
                            <input type="hidden" id="mediaId">
                            <div class="mb-3">
                                <label for="mediaAlt" class="form-label">Texte alternatif</label>
                                <input type="text" class="form-control" id="mediaAlt">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">URL</label>
                                <div class="input-group">
                                    <input type="text" class="form-control" id="mediaUrl" readonly>
                                    <button class="btn btn-outline-secondary" type="button" id="copyUrlBtn">
                                        <i class="bi bi-clipboard"></i>
                                    </button>
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Nom du fichier</label>
                                <input type="text" class="form-control" id="mediaFileName" readonly>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" id="deleteMediaBtn">
                    <i class="bi bi-trash me-2"></i>Supprimer
                </button>
                <button type="button" class="btn btn-primary" id="saveMediaBtn">
                    <i class="bi bi-check-lg me-2"></i>Enregistrer
                </button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
            </div>
        </div>
    </div>
</div>

<style>
.upload-zone {
    border: 2px dashed #dee2e6;
    border-radius: 0.5rem;
    transition: all 0.3s ease;
}

.upload-zone.dragover {
    border-color: #0d6efd;
    background-color: #f8f9fa;
}

.media-item {
    position: relative;
    border: 1px solid #dee2e6;
    border-radius: 0.5rem;
    overflow: hidden;
    transition: all 0.3s ease;
    cursor: pointer;
}

.media-item:hover {
    border-color: #0d6efd;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.media-item img {
    width: 100%;
    height: 150px;
    object-fit: cover;
}

.media-item .media-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0,0,0,0.7);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s ease;
}

.media-item:hover .media-overlay {
    opacity: 1;
}

.media-item .media-info {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: rgba(0,0,0,0.8);
    color: white;
    padding: 0.5rem;
    font-size: 0.8rem;
}
</style>
{% endblock %}

{% block extra_javascripts %}
    {{ parent() }}
    
    <!-- jQuery CDN pour corriger l'erreur temporairement -->
    <script src="https://code.jquery.com/jquery-3.7.1.min.js" 
            integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" 
            crossorigin="anonymous"></script>
    
    <script>
        // Gestionnaire de médias
        class MediaManager {
            constructor() {
                this.currentPage = 1;
                this.searchQuery = '';
                this.typeFilter = '';
                this.init();
            }

            init() {
                this.bindEvents();
                this.loadMedias();
            }

            bindEvents() {
                // Upload modal
                $('#uploadMediaBtn').on('click', () => {
                    $('#uploadModal').modal('show');
                });

                // File selection
                $('#selectFilesBtn').on('click', () => {
                    $('#fileInput').click();
                });

                $('#fileInput').on('change', (e) => {
                    this.handleFiles(e.target.files);
                });

                // Drag and drop
                $('#uploadZone')
                    .on('dragover dragenter', (e) => {
                        e.preventDefault();
                        $(e.currentTarget).addClass('dragover');
                    })
                    .on('dragleave dragend drop', (e) => {
                        e.preventDefault();
                        $(e.currentTarget).removeClass('dragover');
                    })
                    .on('drop', (e) => {
                        const files = e.originalEvent.dataTransfer.files;
                        this.handleFiles(files);
                    });

                // Search and filters
                $('#mediaSearch').on('input', (e) => {
                    this.searchQuery = e.target.value;
                    this.currentPage = 1;
                    this.loadMedias();
                });

                $('#mediaTypeFilter').on('change', (e) => {
                    this.typeFilter = e.target.value;
                    this.currentPage = 1;
                    this.loadMedias();
                });

                // Media detail modal events
                $('#saveMediaBtn').on('click', () => {
                    this.saveMediaDetails();
                });

                $('#deleteMediaBtn').on('click', () => {
                    this.deleteMedia();
                });

                $('#copyUrlBtn').on('click', () => {
                    navigator.clipboard.writeText($('#mediaUrl').val());
                    this.showToast('URL copiée dans le presse-papier', 'success');
                });
            }

            async handleFiles(files) {
                if (files.length === 0) return;

                $('#uploadProgress').show();
                $('#uploadResults').empty();

                const progressBar = $('#uploadProgress .progress-bar');
                let completed = 0;

                for (let file of files) {
                    try {
                        const result = await this.uploadFile(file);
                        if (result.success) {
                            $('#uploadResults').append(`
                                <div class="alert alert-success">
                                    <strong>${file.name}</strong> uploadé avec succès
                                </div>
                            `);
                        } else {
                            $('#uploadResults').append(`
                                <div class="alert alert-danger">
                                    <strong>${file.name}</strong>: ${result.message}
                                </div>
                            `);
                        }
                    } catch (error) {
                        $('#uploadResults').append(`
                            <div class="alert alert-danger">
                                <strong>${file.name}</strong>: Erreur d'upload
                            </div>
                        `);
                    }

                    completed++;
                    const progress = (completed / files.length) * 100;
                    progressBar.css('width', progress + '%');
                }

                setTimeout(() => {
                    $('#uploadProgress').hide();
                    this.loadMedias();
                }, 1000);
            }

            uploadFile(file) {
                return new Promise((resolve, reject) => {
                    const formData = new FormData();
                    formData.append('file', file);

                    $.ajax({
                        url: '{{ path("admin_media_upload") }}',
                        method: 'POST',
                        data: formData,
                        processData: false,
                        contentType: false,
                        success: resolve,
                        error: reject
                    });
                });
            }

            async loadMedias() {
                try {
                    const response = await $.get('{{ path("admin_media_list") }}', {
                        page: this.currentPage,
                        search: this.searchQuery,
                        type: this.typeFilter
                    });

                    this.renderMedias(response.medias);
                    this.renderPagination(response.pagination);
                } catch (error) {
                    console.error('Erreur lors du chargement des médias:', error);
                }
            }

            renderMedias(medias) {
                const grid = $('#mediaGrid');
                grid.empty();

                if (medias.length === 0) {
                    $('#mediaEmpty').show();
                    return;
                }

                $('#mediaEmpty').hide();

                medias.forEach(media => {
                    const item = this.createMediaItem(media);
                    grid.append(item);
                });
            }

            createMediaItem(media) {
                const isImage = media.isImage;
                const preview = isImage 
                    ? `<img src="${media.url}" alt="${media.alt}">`
                    : `<div class="d-flex align-items-center justify-content-center h-100">
                         <i class="bi bi-file-earmark text-muted" style="font-size: 3rem;"></i>
                       </div>`;

                return $(`
                    <div class="col-lg-2 col-md-3 col-sm-4 col-6">
                        <div class="media-item" data-media-id="${media.id}">
                            ${preview}
                            <div class="media-overlay">
                                <i class="bi bi-eye" style="font-size: 1.5rem;"></i>
                            </div>
                            <div class="media-info">
                                <div class="text-truncate">${media.alt || media.fileName}</div>
                            </div>
                        </div>
                    </div>
                `).on('click', () => {
                    this.showMediaDetails(media);
                });
            }

            showMediaDetails(media) {
                $('#mediaId').val(media.id);
                $('#mediaAlt').val(media.alt || '');
                $('#mediaUrl').val(window.location.origin + media.url);
                $('#mediaFileName').val(media.fileName);

                // Preview
                const preview = media.isImage 
                    ? `<img src="${media.url}" class="img-fluid" alt="${media.alt}">`
                    : `<div class="text-center py-4">
                         <i class="bi bi-file-earmark" style="font-size: 4rem;"></i>
                         <p class="mt-2">${media.fileName}</p>
                       </div>`;

                $('#mediaPreview').html(preview);
                $('#mediaDetailModal').modal('show');
            }

            async saveMediaDetails() {
                const mediaId = $('#mediaId').val();
                const alt = $('#mediaAlt').val();

                try {
                    await $.ajax({
                        url: `{{ path("admin_media_update", {id: "MEDIA_ID"}) }}`.replace('MEDIA_ID', mediaId),
                        method: 'PUT',
                        contentType: 'application/json',
                        data: JSON.stringify({ alt: alt })
                    });

                    this.showToast('Média mis à jour avec succès', 'success');
                    $('#mediaDetailModal').modal('hide');
                    this.loadMedias();
                } catch (error) {
                    this.showToast('Erreur lors de la mise à jour', 'error');
                }
            }

            async deleteMedia() {
                if (!confirm('Êtes-vous sûr de vouloir supprimer ce média ?')) {
                    return;
                }

                const mediaId = $('#mediaId').val();

                try {
                    await $.ajax({
                        url: `{{ path("admin_media_delete", {id: "MEDIA_ID"}) }}`.replace('MEDIA_ID', mediaId),
                        method: 'DELETE'
                    });

                    this.showToast('Média supprimé avec succès', 'success');
                    $('#mediaDetailModal').modal('hide');
                    this.loadMedias();
                } catch (error) {
                    this.showToast('Erreur lors de la suppression', 'error');
                }
            }

            renderPagination(pagination) {
                const container = $('#mediaPagination');
                container.empty();

                if (pagination.total <= 1) return;

                const nav = $('<nav><ul class="pagination"></ul></nav>');
                const ul = nav.find('ul');

                // Page précédente
                if (pagination.current > 1) {
                    ul.append(`
                        <li class="page-item">
                            <a class="page-link" href="#" data-page="${pagination.current - 1}">Précédent</a>
                        </li>
                    `);
                }

                // Pages numérotées
                for (let i = Math.max(1, pagination.current - 2); i <= Math.min(pagination.total, pagination.current + 2); i++) {
                    ul.append(`
                        <li class="page-item ${i === pagination.current ? 'active' : ''}">
                            <a class="page-link" href="#" data-page="${i}">${i}</a>
                        </li>
                    `);
                }

                // Page suivante
                if (pagination.current < pagination.total) {
                    ul.append(`
                        <li class="page-item">
                            <a class="page-link" href="#" data-page="${pagination.current + 1}">Suivant</a>
                        </li>
                    `);
                }

                // Event listeners pour la pagination
                ul.find('a[data-page]').on('click', (e) => {
                    e.preventDefault();
                    this.currentPage = parseInt($(e.target).data('page'));
                    this.loadMedias();
                });

                container.append(nav);
            }

            showToast(message, type = 'info') {
                const alertClass = type === 'success' ? 'alert-success' : type === 'error' ? 'alert-danger' : 'alert-info';
                const toast = $(`
                    <div class="alert ${alertClass} alert-dismissible fade show position-fixed" 
                         style="top: 20px; right: 20px; z-index: 9999;">
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                `);

                $('body').append(toast);
                setTimeout(() => toast.remove(), 5000);
            }
        }

        // Initialiser le gestionnaire
        $(document).ready(() => {
            window.mediaManager = new MediaManager();
        });
    </script>
{% endblock %}
